[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore2java::ecore2javahelper]

[template public generateJava(pkg : EPackage)]
[comment @main/]
[let path:EString = pkg.nsPrefix.replaceAll('\\.', '/')]
[let factoryClassName:EString = pkg.name+'Factory']

[file (path+'/RAAPIReferenceWrapper.java', false, 'UTF-8')]
// automatically generated
package [pkg.nsPrefix/];
import lv.lumii.tda.raapi.RAAPI;

// package-visibility:
interface RAAPIReferenceWrapper {
	RAAPI getRAAPI();
	long getRAAPIReference();
	boolean delete();
}
[/file]

[file (path+'/'+pkg.name+'Factory.java', false, 'UTF-8')]
// automatically generated
package [pkg.nsPrefix/];
import lv.lumii.tda.raapi.RAAPI;
import java.util.*;

public class [factoryClassName/]
{
	// for compatibility with ECore
	public static [factoryClassName/] eINSTANCE = new [factoryClassName/]();

	HashMap<Long, RAAPIReferenceWrapper> wrappers =
		new HashMap<Long, RAAPIReferenceWrapper>();

	public RAAPIReferenceWrapper findOrCreateRAAPIReferenceWrapper(Class<? extends RAAPIReferenceWrapper> cls, long rObject, boolean takeReference)
	// if takeReference==true, takes care about freeing rObject
	{
		RAAPIReferenceWrapper w = wrappers.get(rObject);
		if (w != null) {
			if (takeReference)
				raapi.freeReference(rObject);
			return w;
		}

		Class<? extends RAAPIReferenceWrapper> cls1 = findClosestType(rObject);
				
		try {
			java.lang.reflect.Constructor<? extends RAAPIReferenceWrapper> c = cls1.getConstructor([factoryClassName/].class, Long.TYPE, Boolean.TYPE);
			return (RAAPIReferenceWrapper)c.newInstance(this, rObject, takeReference);
		} catch (Throwable t1) {
			try {
				java.lang.reflect.Constructor<? extends RAAPIReferenceWrapper> c = cls.getConstructor([factoryClassName/].class, Long.TYPE, Boolean.TYPE);
				return (RAAPIReferenceWrapper)c.newInstance(this, rObject, takeReference);				
			} catch (Throwable t) {
				return null;
			}
		}

	}

	public Class<? extends RAAPIReferenceWrapper> findClosestType(long rObject)
	{
		Class<? extends RAAPIReferenceWrapper> retVal = null;
		long rCurClass = 0;

		[for (c1:EClassifier |pkg.eClassifiers)]
			[if c1.oclIsTypeOf(EClass)]
		if (raapi.isKindOf(rObject, [c1.name.toUpperCase().replace('.*::', '')/])) {
			if ((rCurClass == 0) || (raapi.isDerivedClass([c1.name.toUpperCase().replace('.*::', '')/],rCurClass))) {
				retVal = [c1.name.replace('.*::', '')/].class;
				rCurClass = [c1.name.toUpperCase().replace('.*::', '')/];
			}
		}
			[/if]
		[/for]

		return retVal; 
	}

	public RAAPIReferenceWrapper findOrCreateRAAPIReferenceWrapper(long rObject, boolean takeReference)
		// if takeReference==true, takes care about freeing rObject
	{
		RAAPIReferenceWrapper w = wrappers.get(rObject);
		if (w != null) {
			if (takeReference)
				raapi.freeReference(rObject);
			return w;
		}
		long it = raapi.getIteratorForDirectObjectClasses(rObject);
		if (it == 0)
			return null;		
		long rClass = raapi.resolveIteratorFirst(it);
		raapi.freeIterator(it);
		if (rClass == 0)
			return null;
		[for (c1:EClassifier |pkg.eClassifiers)]
			[if c1.oclIsTypeOf(EClass)]
		if (rClass == [c1.name.toUpperCase().replace('.*::', '')/])
			w = new [c1.name.replace('.*::', '')/](this, rObject, takeReference);
			[/if]
		[/for] 
		if (w==null) {
		}
		if ((w != null) && takeReference)
			wrappers.put(rObject, w);
		return w;
	}

	public boolean deleteModel()
	{
		boolean ok = true;
		[for (c1:EClassifier |pkg.eClassifiers)]
			[if c1.oclIsTypeOf(EClass)]
		if (![c1.name.replace('.*::', '')/].deleteAllObjects(this))
			ok = false;
			[/if]
		[/for]
		return ok; 
	}

	// RAAPI references:
	RAAPI raapi = null;
	[for (c1:EClassifier |pkg.eClassifiers)]
		[if c1.oclIsTypeOf(EClass)]
			[let c:EClass = c1]
	public long [c.name.replace('.*::', '').toUpperCase()/] = 0;
				[for (f:EStructuralFeature |c.eStructuralFeatures)]
	  public long [c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = 0;
				[/for]
			[/let]
		[/if]  
	[/for]

	public class ElementReferenceException extends Exception
	{
		private static final long serialVersionUID = 1L;
		public ElementReferenceException(String msg)
		{
			super(msg);
		}
	}

	public void unsetRAAPI()
	{
		try {
			setRAAPI(null, null, false);
		}
		catch (Throwable t)
		{
		}
	}

	public RAAPI getRAAPI()
	{
		return raapi;
	}

	public void setRAAPI(RAAPI _raapi, String prefix, boolean insertMetamodel) throws ElementReferenceException // set RAAPI to null to free references
	{
		if (raapi != null) {
			// freeing object-level references...
			for (Long r : wrappers.keySet())
				raapi.freeReference(r);
			wrappers.clear();
			// freeing class-level references...
			[for (c1:EClassifier |pkg.eClassifiers)]
				[if c1.oclIsTypeOf(EClass)]
					[let c:EClass = c1]
			if ([c.name.replace('.*::', '').toUpperCase()/] != 0) {
				raapi.freeReference([c.name.replace('.*::', '').toUpperCase()/]);
				[c.name.replace('.*::', '').toUpperCase()/] = 0;
			}
						[for (f:EStructuralFeature |c.eStructuralFeatures)]
	  		if ([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] != 0) {
				raapi.freeReference([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/]);
				[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = 0;
			}
						[/for]
					[/let]
				[/if]  
			[/for]			
		}

		raapi = _raapi;

		if (raapi != null) {
			// initializing class references...
			[for (c1:EClassifier |pkg.eClassifiers)]
				[if c1.oclIsTypeOf(EClass)]
					[let c:EClass = c1]
			[c.name.replace('.*::', '').toUpperCase()/] = raapi.findClass("[c.name.replace('_SHARP_', '#')/]");
			if (([c.name.replace('.*::', '').toUpperCase()/] == 0) && (prefix != null))
				[c.name.replace('.*::', '').toUpperCase()/] = raapi.findClass(prefix+"[c.name.replace('_SHARP_', '#')/]");
			if (([c.name.replace('.*::', '').toUpperCase()/] == 0) && insertMetamodel)
				[c.name.replace('.*::', '').toUpperCase()/] = raapi.createClass(prefix+"[c.name.replace('_SHARP_', '#')/]");
			if ([c.name.replace('.*::', '').toUpperCase()/] == 0) {				
				setRAAPI(null, null, false); // freeing references initialized so far...
				throw new ElementReferenceException("Error obtaining a reference for the class [c.name.replace('_SHARP_', '#')/].");
			}
					[/let]
				[/if]  
			[/for]			

			// creating generalizations, if they do not exist...
			if (insertMetamodel) {
				[for (c1:EClassifier |pkg.eClassifiers)]
					[if c1.oclIsTypeOf(EClass)]
						[let c:EClass = c1]
						[for (superClass:EClass | c.eSuperTypes)]
				if (!raapi.isDirectSubClass([c.name.replace('.*::', '').toUpperCase()/], [superClass.name.replace('.*::', '').toUpperCase()/]))
					if (!raapi.createGeneralization([c.name.replace('.*::', '').toUpperCase()/], [superClass.name.replace('.*::', '').toUpperCase()/])) {
						setRAAPI(null, null, false); // freeing references initialized so far...
						throw new ElementReferenceException("Error creating a generalization between classes [c.name/] and [superClass.name/].");
					}
						[/for]
						[/let]
					[/if]  
				[/for]			
			}

			// initializing references for attributes and associations...
			[for (c1:EClassifier |pkg.eClassifiers)]
				[if c1.oclIsTypeOf(EClass)]
					[let c:EClass = c1]
						[for (f:EStructuralFeature |c.eStructuralFeatures)]
							[if f.oclIsTypeOf(EAttribute)]
								[let a:EAttribute = f]
								[let type:EString = a.eAttributeType.name
											.replace('EString', 'String')
											.replace('EInt', 'Integer')
											.replace('EBoolean', 'Boolean')
											.replace('EReal', 'Real')]
			[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = raapi.findAttribute([c.name.replace('.*::', '').toUpperCase()/], "[f.name/]");
			if (([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] == 0) && insertMetamodel)
				[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = raapi.createAttribute([c.name.replace('.*::', '').toUpperCase()/], "[f.name/]", raapi.findPrimitiveDataType("[type/]"));
			if ([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] == 0) {
				setRAAPI(null, null, false); // freeing references initialized so far...
				throw new ElementReferenceException("Error obtaining a reference for the attibute [f.name/] of the class [c.name.replace('_SHARP_', '#')/].");
			}
								[/let]
								[/let]
							[else]
								[let r:EReference = f]
								[let type:EString = r.eReferenceType.name]
			[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = raapi.findAssociationEnd([c.name.replace('.*::', '').toUpperCase()/], "[f.name/]");
			if (([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] == 0) && insertMetamodel) {
								[if r.eOpposite = null]
				[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = raapi.createDirectedAssociation([c.name.replace('.*::', '').toUpperCase()/], [type.replace('.*::', '').toUpperCase()/], "[f.name/]", [r.containment/]);
								[else]
								[let r2:EReference = r.eOpposite]
				[c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] = raapi.createAssociation([c.name.replace('.*::', '').toUpperCase()/], [type.replace('.*::', '').toUpperCase()/], "[r2.name/]", "[f.name/]", [r.containment/]);
								[/let]
								[/if]
			}
			if ([c.name.replace('.*::', '').toUpperCase()/]_[f.name.toUpperCase()/] == 0) {
				setRAAPI(null, null, false); // freeing references initialized so far...
				throw new ElementReferenceException("Error obtaining a reference for the association end [f.name/] of the class [c.name.replace('_SHARP_', '#')/].");
			}
								[/let]
								[/let]
							[/if]
						[/for]
					[/let]
				[/if]  
			[/for]			
		}
	}

[for (c1:EClassifier |pkg.eClassifiers)]
  [if c1.oclIsTypeOf(EClass)]
 	[let c:EClass = c1]
	public [c.name.replace('.*::', '')/] create[c.name.replace('.*::', '').toUpperFirst()/]()
	{
		[c.name.replace('.*::', '')/] retVal = new [c.name.replace('.*::', '')/](this);
		wrappers.put(retVal.getRAAPIReference(), retVal);
		return retVal; 
	}
    	[file (path+'/'+c.name.replace('.*::', '')+'.java', false, 'UTF-8')]
// automatically generated
package [pkg.nsPrefix/]; 

import java.util.*;
import lv.lumii.tda.raapi.RAAPI;

public class [c.name.replace('.*::', '')/]
[for (superClass:EClass | c.eSuperTypes)]
	extends [superClass.name.replace('.*::', '')/]
[/for]
  	implements RAAPIReferenceWrapper
{
[for (superClass:EClass | c.eSuperTypes)]
	/* these references are defined only in the top-most superclass:
[/for]
	protected [factoryClassName/] factory;
	protected long rObject = 0;
	protected boolean takeReference;
[for (superClass:EClass | c.eSuperTypes)]
	*/
[/for]

	public RAAPI getRAAPI()
	{
		return factory.raapi;
	}
	public long getRAAPIReference()
	{
		return rObject;
	}

	public boolean delete()
	{
		if (rObject != 0) {
			if (!takeReference) {
				System.err.println("Unable to delete the object "+rObject+" of type [c.name/] since the RAAPI wrapper does not take care of this reference.");
				return false;
			}
			factory.wrappers.remove(rObject);
			boolean retVal = factory.raapi.deleteObject(rObject);
			if (retVal) {
				rObject = 0;
			}
			else
				factory.wrappers.put(rObject, this); // putting back
			return retVal;
		}
		else
			return false;
	}

	public void finalize()
	{
		if (rObject != 0) {
			if (takeReference) {
				factory.wrappers.remove(rObject);
				factory.raapi.freeReference(rObject);
			}
			rObject = 0;
		}
	}

	[if c.name.equalsIgnoreCase('Event') or c.name.equalsIgnoreCase('Command')]
	public boolean submit()
	{
		// return setSubmitter([pkg.nsPrefix/].Submitter.firstObject(factory));
		long SUBMITTER_ROLE = factory.raapi.findAssociationEnd(factory.[c.name.replace('.*::', '').toUpperCase()/], "submitter");  
		boolean retVal = factory.raapi.createLink(rObject, [pkg.nsPrefix/].Submitter.firstObject(factory).rObject, SUBMITTER_ROLE);
		factory.raapi.freeReference(SUBMITTER_ROLE);
		return retVal;
	}
	[/if]

	// package-visibility:
	[c.name.replace('.*::', '')/]([factoryClassName/] _factory)
	{
	[for (superClass:EClass | c.eSuperTypes)]
		super(_factory, _factory.raapi.createObject(_factory.[c.name.replace('.*::', '').toUpperCase()/]), true);		
		factory = _factory;
		rObject = super.rObject;
		takeReference = true;
		factory.wrappers.put(rObject, this);
		/*
	[/for]
		factory = _factory;
		rObject = factory.raapi.createObject(factory.[c.name.replace('.*::', '').toUpperCase()/]);			
		takeReference = true;
		factory.wrappers.put(rObject, this);
	[for (superClass:EClass | c.eSuperTypes)]
		*/
	[/for]
	}

	public [c.name.replace('.*::', '')/]([factoryClassName/] _factory, long _rObject, boolean _takeReference)
	{
	[for (superClass:EClass | c.eSuperTypes)]
		super(_factory, _rObject, _takeReference);
		/*
	[/for]
		factory = _factory;
		rObject = _rObject;
		takeReference = _takeReference;
		if (takeReference)
			factory.wrappers.put(rObject, this);
	[for (superClass:EClass | c.eSuperTypes)]
		*/
	[/for]
	}

	// iterator for instances...
	public static Iterable<? extends [c.name.replace('.*::', '')/]> allObjects()
	{
		return allObjects([factoryClassName/].eINSTANCE);
	} 

	public static Iterable<? extends [c.name.replace('.*::', '')/]> allObjects([factoryClassName/] factory)
	{
		ArrayList<[c.name.replace('.*::', '')/]> retVal = new ArrayList<[c.name.replace('.*::', '')/]>();
		long it = factory.raapi.getIteratorForAllClassObjects(factory.[c.name.replace('.*::', '').toUpperCase()/]);
		if (it == 0)
			return retVal;
		long r = factory.raapi.resolveIteratorFirst(it);
		while (r != 0) {
 			[c.name.replace('.*::', '')/] o = ([c.name.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper(r, true);
			if (o == null)
				o = ([c.name.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper([c.name.replace('.*::', '')/].class, r, true);
			if (o != null)
				retVal.add(o);
			r = factory.raapi.resolveIteratorNext(it);
		}
		factory.raapi.freeIterator(it);
		return retVal;
	}

	public static boolean deleteAllObjects()
	{
		return deleteAllObjects([factoryClassName/].eINSTANCE);
	}

	public static boolean deleteAllObjects([factoryClassName/] factory)
	{
		for ([c.name.replace('.*::', '')/] o : allObjects(factory))
			o.delete();
		return firstObject(factory) == null;
	}

	public static [c.name.replace('.*::', '')/] firstObject()
	{
		return firstObject([factoryClassName/].eINSTANCE);
	} 

	public static [c.name.replace('.*::', '')/] firstObject([factoryClassName/] factory)
	{
		long it = factory.raapi.getIteratorForAllClassObjects(factory.[c.name.replace('.*::', '').toUpperCase()/]);
		if (it == 0)
			return null;
		long r = factory.raapi.resolveIteratorFirst(it);
		factory.raapi.freeIterator(it);
		if (r == 0)
			return null;
		else {
			[c.name.replace('.*::', '')/]  retVal = ([c.name.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper(r, true);
			if (retVal == null)
				retVal = ([c.name.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper([c.name.replace('.*::', '')/].class, r, true);
			return retVal;
		}
	} 
 
			[for (f:EStructuralFeature |c.eStructuralFeatures)]
				[if f.oclIsTypeOf(EAttribute)]
					[let a:EAttribute = f]
					[let type:EString = a.eAttributeType.name
											.replace('EString', 'String')
											.replace('EInt', 'Integer')
											.replace('EBoolean', 'Boolean')
											.replace('EReal', 'Double')
											.replace('EDouble', 'Double')]
	public [type/] get[a.name.toUpperFirst()/]()
	{
		[if type.equalsIgnoreCase('String')]
		return factory.raapi.getAttributeValue(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[a.name.toUpperCase()/]);
		[else]
		try { 
			String value = factory.raapi.getAttributeValue(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[a.name.toUpperCase()/]);
			if (value == null)
				return null;
			return [type/].parse[type.replace('Integer', 'Int')/](value);
		}
		catch (Throwable t)
		{
			return null;
		} 
		[/if]
	}
	public boolean set[a.name.toUpperFirst()/]([type/] value)
	{
		if (value == null)
			return factory.raapi.deleteAttributeValue(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[a.name.toUpperCase()/]);
		return factory.raapi.setAttributeValue(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[a.name.toUpperCase()/], value.toString());
	}
					[/let]
					[/let]
				[else]
					[let r:EReference = f]
					[let type:EString = r.eReferenceType.name]
						[if r.container or (r.upperBound = 1)]					
	public [type.replace('.*::', '')/] get[r.name.toUpperFirst()/]()
	{
		long it = factory.raapi.getIteratorForLinkedObjects(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[r.name.toUpperCase()/]);
		if (it == 0)
			return null;
		long r = factory.raapi.resolveIteratorFirst(it);
		factory.raapi.freeIterator(it);
		if (r != 0) {
			[type.replace('.*::', '')/] retVal = ([type.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper(r, true);
			if (retVal == null)
				retVal = ([type.replace('.*::', '')/])factory.findOrCreateRAAPIReferenceWrapper([type.replace('.*::', '')/].class, r, true);
			return retVal;
		}
		else
			return null;
	}
						[else]
	public List<[type.replace('.*::', '')/]> get[r.name.toUpperFirst()/]()
	{
		return new [pkg.name/]_RAAPILinkedObjectsList<[type.replace('.*::', '')/]>(factory, rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[r.name.toUpperCase()/]); 
	}
						[/if]
	public boolean set[r.name.toUpperFirst()/]([type.replace('.*::', '')/] value)
	{
		boolean ok = true;
		long it = factory.raapi.getIteratorForLinkedObjects(rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[r.name.toUpperCase()/]);
		// deleting previous links...
		if (it != 0) {
			ArrayList<Long> list = new ArrayList<Long>();
			long r = factory.raapi.resolveIteratorFirst(it);
			while (r != 0) {
				list.add(r);
				r = factory.raapi.resolveIteratorNext(it);
			}
			factory.raapi.freeIterator(it);
			for (Long rLinked : list)
				if (!factory.raapi.deleteLink(rObject, rLinked, factory.[c.name.replace('.*::', '').toUpperCase()/]_[r.name.toUpperCase()/]))
					ok = false;
		}
		if (value != null)
			if (!factory.raapi.createLink(rObject, value.rObject, factory.[c.name.replace('.*::', '').toUpperCase()/]_[r.name.toUpperCase()/]))
				ok = false;
		return ok;
	}
					[/let]	
					[/let]	
				[/if]
			[/for]
}
    	[/file]
	[/let]
  [/if]
  
[/for]
}
[/file]

[file (path+'/'+pkg.name+'_RAAPILinkedObjectsList.java', false, 'UTF-8')]
// automatically generated
package [pkg.nsPrefix/]; 

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

class [pkg.name/]_RAAPILinkedObjectsList<E extends RAAPIReferenceWrapper> implements List<E> {

	private [pkg.name/]Factory factory;
	private long rSourceObject;
	private long rAssociationEnd;
	[pkg.name/]_RAAPILinkedObjectsList([pkg.name/]Factory _factory, long _rSourceObject, long _rAssociationEnd)
	{
		factory = _factory;
		rSourceObject = _rSourceObject;
		rAssociationEnd = _rAssociationEnd;
	}
	
	private ArrayList<Long> getLinkedObjects()
	{
		ArrayList<Long> retVal = new ArrayList<Long>(); 
		long it = factory.raapi.getIteratorForLinkedObjects(rSourceObject, rAssociationEnd);
		if (it == 0)
			return retVal;
		long r = factory.raapi.resolveIteratorFirst(it);
		while (r != 0) {
			retVal.add(r);
			r =factory.raapi.resolveIteratorNext(it);
		}		
		factory.raapi.freeIterator(it);
		return retVal;
	}
	private void freeReferences(Collection<Long> c)
	{
		for (Long l : c)
			factory.raapi.freeReference(l);
	}
	
	@Override
	public boolean add(E e) {
		if (e.getRAAPI() != factory.raapi)
			return false;
		return factory.raapi.createLink(rSourceObject, e.getRAAPIReference(), rAssociationEnd);		
	}

	@Override
	public void add(int index, E element) {
		if (element.getRAAPI() != factory.raapi)
			return;
		if (index < 0)
			factory.raapi.createLink(rSourceObject, element.getRAAPIReference(), rAssociationEnd);
		else
			factory.raapi.createOrderedLink(rSourceObject, element.getRAAPIReference(), rAssociationEnd, index);		
	}

	@Override
	public boolean addAll(Collection<? extends E> c) {
		boolean ok = true;
		for (E element : c)
			if (!add(element))
				ok = false;
		return ok;
	}

	@Override
	public boolean addAll(int index, Collection<? extends E> c) {
		if (index < 0)
			return addAll(c);
		
		ArrayList<Long> list = getLinkedObjects();
		ArrayList<Long> listToFree = new ArrayList<Long>(list);
		clear();
		for (E element : c) {
			list.add(index, element.getRAAPIReference());
			index++;
		}
		boolean ok = true;
		for (Long l : list)
			if (!factory.raapi.createLink(rSourceObject, l, rAssociationEnd))
				ok = false;
		
		freeReferences(listToFree);
		return ok;
	}

	@Override
	public void clear() {
		for (Long l : getLinkedObjects())
			factory.raapi.deleteLink(rSourceObject, l, rAssociationEnd);
	}

	@Override
	public boolean contains(Object o) {
		if (!(o instanceof RAAPIReferenceWrapper))
			return false;
		if (((RAAPIReferenceWrapper)o).getRAAPI() != factory.raapi)
			return false;
		ArrayList<Long> list = getLinkedObjects();
		boolean retVal = list.contains( ((RAAPIReferenceWrapper)o).getRAAPIReference() );
		freeReferences(list);
		return retVal;
	}

	@Override
	public boolean containsAll(Collection<?> c) {		
		ArrayList<Long> list = getLinkedObjects();
		
		Collection<Long> c2 = new ArrayList<Long>();
		for (Object o : c) {
			if (!(o instanceof RAAPIReferenceWrapper))
				continue;
			if (((RAAPIReferenceWrapper)o).getRAAPI() != factory.raapi)
				continue;
			c2.add(((RAAPIReferenceWrapper)o).getRAAPIReference());
		}
		
		boolean retVal = list.containsAll(c2);
		freeReferences(list);
		return retVal;
	}

	@SuppressWarnings("unchecked")
	@Override
	public E get(int index) {
		long it = factory.raapi.getIteratorForLinkedObjects(rSourceObject, rAssociationEnd);
		if (it == 0)
			return null;
		long r = factory.raapi.resolveIterator(it, index);
		factory.raapi.freeIterator(it);
		E retVal = (E)factory.findOrCreateRAAPIReferenceWrapper(r, true);
		if (retVal == null)
			retVal = (E)factory.findOrCreateRAAPIReferenceWrapper(factory.findClosestType(r), r, true);
		return retVal;
	}

	@Override
	public int indexOf(Object o) {
		if (!(o instanceof RAAPIReferenceWrapper))
			return -1;
		if (((RAAPIReferenceWrapper)o).getRAAPI() != factory.raapi)
			return -1;
		ArrayList<Long> list = getLinkedObjects();
		int retVal = list.indexOf( ((RAAPIReferenceWrapper)o).getRAAPIReference() );
		freeReferences(list);
		return retVal;
	}

	@Override
	public boolean isEmpty() {
		long it = factory.raapi.getIteratorForLinkedObjects(rSourceObject, rAssociationEnd);
		if (it == 0)
			return true;
		long r = factory.raapi.resolveIteratorFirst(it);
		if (r != 0)
			factory.raapi.freeReference(r);
		factory.raapi.freeIterator(it);
		return (r==0);
	}

	@SuppressWarnings("unchecked")
	@Override
	public Iterator<E> iterator() {
		ArrayList<E> retVal = new ArrayList<E>();
		for (Long l : getLinkedObjects()) {
			E obj = (E)factory.findOrCreateRAAPIReferenceWrapper(l, true);
			if (obj == null)
				obj = (E)factory.findOrCreateRAAPIReferenceWrapper(factory.findClosestType(l), l, true);
			if (obj != null)
				retVal.add(obj);
		}
		return retVal.iterator();
	}

	@Override
	public int lastIndexOf(Object o) {
		return indexOf(o);
	}

	@SuppressWarnings("unchecked")
	@Override
	public ListIterator<E> listIterator() {
		ArrayList<E> retVal = new ArrayList<E>();
		for (Long l : getLinkedObjects()) {
			E obj = (E)factory.findOrCreateRAAPIReferenceWrapper(l, true);
			if (obj == null)
				obj = (E)factory.findOrCreateRAAPIReferenceWrapper(factory.findClosestType(l), l, true);
			if (obj != null)
				retVal.add(obj);
		}
		return retVal.listIterator();
	}

	@Override
	public ListIterator<E> listIterator(int index) {
		ListIterator<E> retVal = listIterator();
		for (int i=0; i<index-1; i++)
			if (retVal.hasNext())
				retVal.next();
		return retVal;
	}

	@Override
	public boolean remove(Object o) {
		if (!(o instanceof RAAPIReferenceWrapper))
			return false;
		if (((RAAPIReferenceWrapper)o).getRAAPI() != factory.raapi)
			return false;
		return factory.raapi.deleteLink(rSourceObject, ((RAAPIReferenceWrapper)o).getRAAPIReference(), rAssociationEnd);
	}

	@Override
	public E remove(int index) {
		E o = get(index);
		if (o == null)
			return null;
		if (remove(o))
			return o;
		else
			return null;
	}

	@Override
	public boolean removeAll(Collection<?> c) {
		boolean ok = true;
		for (Object o : c)
			if (!remove(o))
				ok = false;
		return ok;
	}

	@Override
	public boolean retainAll(Collection<?> c) {
		clear();
		boolean ok = true;
		for (Object o : c) {
			if (o instanceof RAAPIReferenceWrapper) { // TODO: check for E more precisely				
				if (!add((E)o))
					ok = false;
			}
			else
				ok = false;
		}
		return ok;
	}

	@Override
	public E set(int index, E element) {
		E old = remove(index);
		if (old == null)
			return null;
		add(index, element);
		return old;
	}

	@Override
	public int size() {
		long it = factory.raapi.getIteratorForLinkedObjects(rSourceObject, rAssociationEnd);
		if (it == 0)
			return 0;
		int retVal = factory.raapi.getIteratorLength(it);
		factory.raapi.freeIterator(it);
		return retVal;
	}

	@Override
	public List<E> subList(int fromIndex, int toIndex) {
		throw new UnsupportedOperationException("subList not implemented for RAAPI wrappers");
	}

	@Override
	public Object['[]'/] toArray() {
		return toArray(new Object['[0]'/]);
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> T['[]'/] toArray(T['[]'/] a) {
		ArrayList<Long> list = getLinkedObjects();				
		ArrayList<T> list2 = new ArrayList<T>();
		for (Long l : list) {
			T o = (T)factory.findOrCreateRAAPIReferenceWrapper(l, true);
			if (o == null) {
				try {
					o = (T)factory.findOrCreateRAAPIReferenceWrapper(
							(Class<? extends RAAPIReferenceWrapper>)getClass().getMethod("toArray", java.lang.reflect.Array.class).getGenericParameterTypes()['[0]'/],
							l, true);
				} catch (Throwable t) {
					o = null;
				}
			}
			if (o != null)
				list2.add(o);
			else
				factory.raapi.freeReference(l);
		}
		return list2.toArray(a);
	}

}
[/file]

[if not fileExists(path+'/Submitter.java')]
[if fileExists(path+'/Event.java') or fileExists(path+'/Command.java') or fileExists(path+'/AsyncCommand.java')]
[file (path+'/Submitter.java', false, 'UTF-8')]
// automatically generated from .mtl
package [pkg.nsPrefix/]; 

import java.util.*;
import lv.lumii.tda.raapi.RAAPI;

public class Submitter
  	implements RAAPIReferenceWrapper
{
	protected [pkg.name/]Factory factory;
	protected long rObject = 0;
	protected boolean takeReference;

	public RAAPI getRAAPI()
	{
		return factory.raapi;
	}
	public long getRAAPIReference()
	{
		return rObject;
	}

	public boolean delete()
	{
		if (rObject != 0) {
			if (!takeReference) {
				System.err.println("Unable to delete the object "+rObject+" of type Submitter since the RAAPI wrapper does not take care of this reference.");
				return false;
			}
			factory.wrappers.remove(rObject);
			boolean retVal = factory.raapi.deleteObject(rObject);
			if (retVal) {
				rObject = 0;
			}
			else
				factory.wrappers.put(rObject, this); // putting back
			return retVal;
		}
		else
			return false;
	}

	public void finalize()
	{
		if (rObject != 0) {
			if (takeReference) {
				factory.wrappers.remove(rObject);
				factory.raapi.freeReference(rObject);
			}
			rObject = 0;
		}
	}


	// package-visibility:
	Submitter([pkg.name/]Factory _factory)
	{
		factory = _factory;
		long SUBMITTER = factory.raapi.findClass("Submitter"); 
		rObject = factory.raapi.createObject(SUBMITTER);
		factory.raapi.freeReference(SUBMITTER);
		takeReference = true;
		factory.wrappers.put(rObject, this);
	}

	public Submitter([pkg.name/]Factory _factory, long _rObject, boolean _takeReference)
	{
		factory = _factory;
		rObject = _rObject;
		takeReference = _takeReference;
		if (takeReference)
			factory.wrappers.put(rObject, this);
	}

	// iterator for instances...
	public static Iterable<? extends Submitter> allObjects()
	{
		return allObjects([pkg.name/]Factory.eINSTANCE);
	} 

	public static Iterable<? extends Submitter> allObjects([pkg.name/]Factory factory)
	{
		ArrayList<Submitter> retVal = new ArrayList<Submitter>();
		long SUBMITTER = factory.raapi.findClass("Submitter"); 
		long it = factory.raapi.getIteratorForAllClassObjects(SUBMITTER);
		factory.raapi.freeReference(SUBMITTER);
		if (it == 0)
			return retVal;
		long r = factory.raapi.resolveIteratorFirst(it);
		while (r != 0) {
 			Submitter o = (Submitter)factory.findOrCreateRAAPIReferenceWrapper(r, true);
			if (o == null)
				o = (Submitter)factory.findOrCreateRAAPIReferenceWrapper(Submitter.class, r, true);
			if (o != null)
				retVal.add(o);
			r = factory.raapi.resolveIteratorNext(it);
		}
		factory.raapi.freeIterator(it);
		return retVal;
	}

	public static boolean deleteAllObjects()
	{
		return deleteAllObjects([pkg.name/]Factory.eINSTANCE);
	}

	public static boolean deleteAllObjects([pkg.name/]Factory factory)
	{
		for (Submitter o : allObjects(factory))
			o.delete();
		return firstObject(factory) == null;
	}

	public static Submitter firstObject()
	{
		return firstObject([pkg.name/]Factory.eINSTANCE);
	} 

	public static Submitter firstObject([pkg.name/]Factory factory)
	{
		long SUBMITTER = factory.raapi.findClass("Submitter"); 
		long it = factory.raapi.getIteratorForAllClassObjects(SUBMITTER);
		factory.raapi.freeReference(SUBMITTER);
		if (it == 0)
			return null;
		long r = factory.raapi.resolveIteratorFirst(it);
		factory.raapi.freeIterator(it);
		if (r == 0)
			return null;
		else {
			Submitter  retVal = (Submitter)factory.findOrCreateRAAPIReferenceWrapper(r, true);
			if (retVal == null)
				retVal = (Submitter)factory.findOrCreateRAAPIReferenceWrapper(Submitter.class, r, true);
			return retVal;
		}
	} 

	[if fileExists(path+'/Event.java')] 
	public List<Event> getEvent()
	{
		long SUBMITTER = factory.raapi.findClass("Submitter");
		long SUBMITTER_EVENT = factory.raapi.findAssociationEnd(SUBMITTER, "event");  
		List<Event> retVal = new [pkg.name/]_RAAPILinkedObjectsList<Event>(factory, rObject, SUBMITTER_EVENT);
		factory.raapi.freeReference(SUBMITTER);
		factory.raapi.freeReference(SUBMITTER_EVENT);
		return retVal; 
	}
	[/if]
	[if fileExists(path+'/Command.java')]  
	public List<Command> getCommand()
	{
		long SUBMITTER = factory.raapi.findClass("Submitter");
		long SUBMITTER_COMMAND = factory.raapi.findAssociationEnd(SUBMITTER, "command");  
		List<Command> retVal = new [pkg.name/]_RAAPILinkedObjectsList<Command>(factory, rObject, SUBMITTER_COMMAND); 
		factory.raapi.freeReference(SUBMITTER);
		factory.raapi.freeReference(SUBMITTER_COMMAND);
		return retVal;
	}
	[/if]
}
[/file]
[/if]
[/if]

[/let]
[/let]
[/template]
