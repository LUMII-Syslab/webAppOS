///// Generated by DelegatorBaseGenerator.                /////
///// Template used for the head: DelegatorBase.template. /////

package lv.lumii.tda.kernel;
import lv.lumii.tda.raapi.*;

abstract class DelegatorBase<DelegateAPI extends RAAPI> implements RAAPI {
	
	
	public abstract DelegateAPI getDelegate();
	
	
	///// GENERATED DELEGATION METHODS /////

	public long findClass(String arg0)
	{
		return getDelegate().findClass(arg0);
	}
	public String getClassName(long arg0)
	{
		return getDelegate().getClassName(arg0);
	}
	public long createObject(long arg0)
	{
		return getDelegate().createObject(arg0);
	}
	public boolean createLink(long arg0, long arg1, long arg2)
	{
		return getDelegate().createLink(arg0, arg1, arg2);
	}
	public long getAttributeType(long arg0)
	{
		return getDelegate().getAttributeType(arg0);
	}
	public boolean isClass(long arg0)
	{
		return getDelegate().isClass(arg0);
	}
	public String getAttributeName(long arg0)
	{
		return getDelegate().getAttributeName(arg0);
	}
	public long getIteratorForObjectsByAttributeValue(long arg0, String arg1)
	{
		return getDelegate().getIteratorForObjectsByAttributeValue(arg0, arg1);
	}
	public long getIteratorForAllOutgoingAssociationEnds(long arg0)
	{
		return getDelegate().getIteratorForAllOutgoingAssociationEnds(arg0);
	}
	public long getIteratorForDirectOutgoingAssociationEnds(long arg0)
	{
		return getDelegate().getIteratorForDirectOutgoingAssociationEnds(arg0);
	}
	public long getIteratorForDirectLinguisticInstances(long arg0)
	{
		return getDelegate().getIteratorForDirectLinguisticInstances(arg0);
	}
	public long getIteratorForDirectObjectClasses(long arg0)
	{
		return getDelegate().getIteratorForDirectObjectClasses(arg0);
	}
	public long getIteratorForAllIngoingAssociationEnds(long arg0)
	{
		return getDelegate().getIteratorForAllIngoingAssociationEnds(arg0);
	}
	public long getIteratorForDirectIngoingAssociationEnds(long arg0)
	{
		return getDelegate().getIteratorForDirectIngoingAssociationEnds(arg0);
	}
	public long getIteratorForAllLinguisticInstances(long arg0)
	{
		return getDelegate().getIteratorForAllLinguisticInstances(arg0);
	}
	public long createClass(String arg0)
	{
		return getDelegate().createClass(arg0);
	}
	public boolean deleteClass(long arg0)
	{
		return getDelegate().deleteClass(arg0);
	}
	public boolean isDerivedClass(long arg0, long arg1)
	{
		return getDelegate().isDerivedClass(arg0, arg1);
	}
	public boolean deleteObject(long arg0)
	{
		return getDelegate().deleteObject(arg0);
	}
	public boolean moveObject(long arg0, long arg1)
	{
		return getDelegate().moveObject(arg0, arg1);
	}
	public boolean isTypeOf(long arg0, long arg1)
	{
		return getDelegate().isTypeOf(arg0, arg1);
	}
	public boolean isKindOf(long arg0, long arg1)
	{
		return getDelegate().isKindOf(arg0, arg1);
	}
	public long createAttribute(long arg0, String arg1, long arg2)
	{
		return getDelegate().createAttribute(arg0, arg1, arg2);
	}
	public boolean isDirectSubClass(long arg0, long arg1)
	{
		return getDelegate().isDirectSubClass(arg0, arg1);
	}
	public long findAttribute(long arg0, String arg1)
	{
		return getDelegate().findAttribute(arg0, arg1);
	}
	public long resolveIterator(long arg0, int arg1)
	{
		return getDelegate().resolveIterator(arg0, arg1);
	}
	public String getRoleName(long arg0)
	{
		return getDelegate().getRoleName(arg0);
	}
	public boolean linkExists(long arg0, long arg1, long arg2)
	{
		return getDelegate().linkExists(arg0, arg1, arg2);
	}
	public boolean isComposition(long arg0)
	{
		return getDelegate().isComposition(arg0);
	}
	public boolean isLinguistic(long arg0)
	{
		return getDelegate().isLinguistic(arg0);
	}
	public void freeIterator(long arg0)
	{
		getDelegate().freeIterator(arg0);
	}
	public long getSourceClass(long arg0)
	{
		return getDelegate().getSourceClass(arg0);
	}
	public boolean deleteLink(long arg0, long arg1, long arg2)
	{
		return getDelegate().deleteLink(arg0, arg1, arg2);
	}
	public boolean isAttribute(long arg0)
	{
		return getDelegate().isAttribute(arg0);
	}
	public boolean isAssociationEnd(long arg0)
	{
		return getDelegate().isAssociationEnd(arg0);
	}
	public long getTargetClass(long arg0)
	{
		return getDelegate().getTargetClass(arg0);
	}
	public void freeReference(long arg0)
	{
		getDelegate().freeReference(arg0);
	}
	public boolean deleteAttribute(long arg0)
	{
		return getDelegate().deleteAttribute(arg0);
	}
	public long createAdvancedAssociation(String arg0, boolean arg1, boolean arg2)
	{
		return getDelegate().createAdvancedAssociation(arg0, arg1, arg2);
	}
	public long findPrimitiveDataType(String arg0)
	{
		return getDelegate().findPrimitiveDataType(arg0);
	}
	public long getAttributeDomain(long arg0)
	{
		return getDelegate().getAttributeDomain(arg0);
	}
	public long findAssociationEnd(long arg0, String arg1)
	{
		return getDelegate().findAssociationEnd(arg0, arg1);
	}
	public boolean deleteAssociation(long arg0)
	{
		return getDelegate().deleteAssociation(arg0);
	}
	public boolean isAdvancedAssociation(long arg0)
	{
		return getDelegate().isAdvancedAssociation(arg0);
	}
	public boolean createOrderedLink(long arg0, long arg1, long arg2, int arg3)
	{
		return getDelegate().createOrderedLink(arg0, arg1, arg2, arg3);
	}
	public long getIteratorForLinkedObjects(long arg0, long arg1)
	{
		return getDelegate().getIteratorForLinkedObjects(arg0, arg1);
	}
	public long getInverseAssociationEnd(long arg0)
	{
		return getDelegate().getInverseAssociationEnd(arg0);
	}
	public boolean deleteAttributeValue(long arg0, long arg1)
	{
		return getDelegate().deleteAttributeValue(arg0, arg1);
	}
	public int getLinkedObjectPosition(long arg0, long arg1, long arg2)
	{
		return getDelegate().getLinkedObjectPosition(arg0, arg1, arg2);
	}
	public long resolveIteratorFirst(long arg0)
	{
		return getDelegate().resolveIteratorFirst(arg0);
	}
	public boolean excludeObjectFromClass(long arg0, long arg1)
	{
		return getDelegate().excludeObjectFromClass(arg0, arg1);
	}
	public long getIteratorForDirectSubClasses(long arg0)
	{
		return getDelegate().getIteratorForDirectSubClasses(arg0);
	}
	public boolean includeObjectInClass(long arg0, long arg1)
	{
		return getDelegate().includeObjectInClass(arg0, arg1);
	}
	public long getIteratorForAllAttributes(long arg0)
	{
		return getDelegate().getIteratorForAllAttributes(arg0);
	}
	public long getIteratorForDirectAttributes(long arg0)
	{
		return getDelegate().getIteratorForDirectAttributes(arg0);
	}
	public boolean createGeneralization(long arg0, long arg1)
	{
		return getDelegate().createGeneralization(arg0, arg1);
	}
	public boolean isPrimitiveDataType(long arg0)
	{
		return getDelegate().isPrimitiveDataType(arg0);
	}
	public boolean deleteGeneralization(long arg0, long arg1)
	{
		return getDelegate().deleteGeneralization(arg0, arg1);
	}
	public long getIteratorForDirectSuperClasses(long arg0)
	{
		return getDelegate().getIteratorForDirectSuperClasses(arg0);
	}
	public boolean setAttributeValue(long arg0, long arg1, String arg2)
	{
		return getDelegate().setAttributeValue(arg0, arg1, arg2);
	}
	public String getAttributeValue(long arg0, long arg1)
	{
		return getDelegate().getAttributeValue(arg0, arg1);
	}
	public long getIteratorForClasses()
	{
		return getDelegate().getIteratorForClasses();
	}
	public String getPrimitiveDataTypeName(long arg0)
	{
		return getDelegate().getPrimitiveDataTypeName(arg0);
	}
	public long getIteratorForAllClassObjects(long arg0)
	{
		return getDelegate().getIteratorForAllClassObjects(arg0);
	}
	public long getIteratorForDirectClassObjects(long arg0)
	{
		return getDelegate().getIteratorForDirectClassObjects(arg0);
	}
	public long createAssociation(long arg0, long arg1, String arg2, String arg3, boolean arg4)
	{
		return getDelegate().createAssociation(arg0, arg1, arg2, arg3, arg4);
	}
	public long createDirectedAssociation(long arg0, long arg1, String arg2, boolean arg3)
	{
		return getDelegate().createDirectedAssociation(arg0, arg1, arg2, arg3);
	}
	public int getIteratorLength(long arg0)
	{
		return getDelegate().getIteratorLength(arg0);
	}
	public long resolveIteratorNext(long arg0)
	{
		return getDelegate().resolveIteratorNext(arg0);
	}
	public long deserializeReference(String arg0)
	{
		return getDelegate().deserializeReference(arg0);
	}
	public String callSpecificOperation(String arg0, String arg1)
	{
		return getDelegate().callSpecificOperation(arg0, arg1);
	}
	public long getLinguisticClassFor(long arg0)
	{
		return getDelegate().getLinguisticClassFor(arg0);
	}
	public long getIteratorForLinguisticClasses()
	{
		return getDelegate().getIteratorForLinguisticClasses();
	}
	public String serializeReference(long arg0)
	{
		return getDelegate().serializeReference(arg0);
	}
}
