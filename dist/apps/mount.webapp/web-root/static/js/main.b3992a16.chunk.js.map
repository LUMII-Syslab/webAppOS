{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","webappos","window","MountTable","props","myRef","React","createRef","state","mountPoints","supportedFS","columnWidths","lastW","myThis","request_scopes","then","webcall","resp","result","console","log","setState","readRegistry","json","arr","path","key","push","mountPoint","driver","this","getLocationPrefix","location","removeLocationPrefix","collectMountPointsRecursively","current","w","rootTableElement","offsetWidth","i","length","mp","dir","trim","value","updateColumnWidths","size","indexOf","substring","style","width","onResize","ref","numRows","enableRowResizing","maxRowHeight","minRowHeight","defaultRowHeight","onColumnWidthChanged","handleColumnWidthChanged","name","cellRenderer","rowIndex","type","onChange","e","target","map","item","selected","icon","float","onClick","writeRegistry","Component","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3992a16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Button } from \"@blueprintjs/core\";\nimport { Column, Cell, Table } from \"@blueprintjs/table\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\n\nlet webappos = window.webappos;\n\nclass MountTable extends React.Component {\n\n  collectMountPointsRecursively(json, arr, path) { // path is with the trailing \"/\"\n    for (let key in json) {\n      if (typeof json[key] === \"string\") {\n        arr.push({\n          mountPoint: path + key,\n          driver: this.getLocationPrefix(json[key]),\n          location: this.removeLocationPrefix(json[key])\n        });\n      }\n      else {\n        this.collectMountPointsRecursively(json[key], arr, path + key + \"/\");\n      }\n    }\n    return arr;\n  }\n\n  updateColumnWidths() {\n    if (!this.myRef.current)\n      return;\n    let w = this.myRef.current.rootTableElement.offsetWidth - 35 - 35;\n    if (this.lastW == w)\n      return;\n    this.lastW = w;\n    console.log(\"w\",w);\n    let arr = [...this.state.columnWidths];\n    arr[0] = w*0.25;\n    w -= arr[0];\n    arr[1] = 100;\n    w -= 100;\n    arr[2] = w;\n    this.setState({\n      columnWidths: arr\n    });\n\n  }\n\n  readRegistry() {\n    let myThis = this;\n    webappos.webcall(\"webappos.getUserRegistryValue\", \"fs_mount_points\").then((resp) => {\n      if (resp.result) {\n        console.log(\"registry data\",resp.result);\n        myThis.setState({\n          mountPoints: myThis.collectMountPointsRecursively(resp.result, [], \"\")\n        });\n      }\n    });\n  }\n\n  writeRegistry() {\n    let myThis = this;\n    for (let i=0; i<this.state.mountPoints.length; i++) {\n      let mp = this.state.mountPoints[i];      \n      let dir = mp.mountPoint.trim();\n      // TODO: create dir, if it does not exist\n      if (dir)\n        webappos.webcall(\"webappos.setUserRegistryValue\", {key:\"fs_mount_points/\"+dir, value:mp.driver+\":\"+mp.location});\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.myRef = React.createRef();\n\n    this.state = {\n      mountPoints: [],\n      supportedFS: [],\n      columnWidths: [null,null,null,35]\n    };\n    this.lastW = 0;\n    let myThis = this;\n    webappos.request_scopes(\"webappos_scopes\", \"login\").then(() => {\n\n      webappos.webcall(\"webappos.getSupportedFileSystems\").then((resp) => {\n        if (resp.result) {\n          console.log(\"supported_fs\",resp.result);\n          myThis.setState({\n            supportedFS: [...resp.result, \"gdrive\", \"onedrive\"]\n          }, () => {\n            myThis.readRegistry();\n          });\n        }\n      });\n    });\n\n  }\n\n  componentDidMount() {\n    this.updateColumnWidths();\n  }\n\n  componentDidUpdate() {\n    console.log(\"state2\", this.state);\n //   this.updateColumnWidths();\n  }\n\n  handleColumnWidthChanged(i, size) {\n    console.log(i, size);\n    let arr = [...this.state.columnWidths];\n    arr[i] = size;\n    this.setState({\n      columnWidths: arr\n    });\n  }\n\n  getLocationPrefix(location) {    \n    let i = location.indexOf(\":\");\n    if (i>=0)\n      return location.substring(0,i);\n    return \"\";\n  }\n\n  removeLocationPrefix(location) {\n    let i = location.indexOf(\":\");\n    if (i>=0)\n      return location.substring(i+1);\n    return location;    \n  }\n\n  render() {\n    let myThis = this;\n    const mountPointRenderer = (rowIndex) => {\n      return <input type=\"text\" value={this.state.mountPoints[rowIndex].mountPoint} onChange={(e)=>{this.state.mountPoints[rowIndex].mountPoint=e.target.value;this.setState({mountPoints:this.state.mountPoints});}}></input>\n    };\n    const driverRenderer = (rowIndex) => {\n      return <select onChange={(e)=>{this.state.mountPoints[rowIndex].driver=e.target.value;this.setState({mountPoints:this.state.mountPoints});}}> {this.state.supportedFS.map((item)=>(<option value={item} selected={this.state.mountPoints[rowIndex].driver==item}>{item}</option>))}</select>;\n    };\n    const locationRenderer = (rowIndex) => {\n      return <input type=\"text\" value={this.state.mountPoints[rowIndex].location} onChange={(e)=>{this.state.mountPoints[rowIndex].location=e.target.value;this.setState({mountPoints:this.state.mountPoints});}}></input>\n    };\n    const xRenderer = (rowIndex) => {\n      return <Button icon=\"delete\"></Button>\n    };\n    let rowHeight = 32;\n\n    return <div style={{width:\"100%\"}} onResize={this.updateColumnWidths()}><Table ref={this.myRef} numRows={this.state.mountPoints.length} enableRowResizing={false}\n      maxRowHeight={rowHeight} minRowHeight={rowHeight} defaultRowHeight={rowHeight}\n      style={{width:\"100%\"}} columnWidths={this.state.columnWidths} onColumnWidthChanged={this.handleColumnWidthChanged}\n      \n    >\n      <Column name=\"Mount Point\" cellRenderer={mountPointRenderer}/>\n      <Column name=\"Driver\" cellRenderer={driverRenderer}/>\n      <Column name=\"Location\" cellRenderer={locationRenderer}/>\n      <Column name=\"\" cellRenderer={xRenderer}/>\n    </Table>\n    <div style={{float:\"left\"}}><Button icon=\"add\" onClick={(e)=>{this.state.mountPoints.push({mountPoint:\"some dir\",driver:\"\",location:\"\"}); this.setState({mountPoints:this.state.mountPoints})}}></Button></div>\n    <div style={{float:\"right\"}}>\n      <Button icon=\"refresh\" onClick={(e)=>{this.readRegistry()}}>Reset</Button>\n      <Button icon=\"tick-circle\" onClick={(e)=>{this.writeRegistry()}}>Save</Button>\n    </div>\n    </div>;\n  }\n\n}\n\n// TODO: table, allow to change, when ok/apply -> store in registry fs_mount_point each mount point, then re-read the registry and re-collectMountPointsRecursively and setState\n// button + adds a new line\n// button - for each line\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n        <MountTable />        \n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}