{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","webappos","window","MountTable","props","state","fs_mount_points","supported_fs","myThis","request_scopes","then","q","webcall_and_wait","console","log","collectMountPointsRecursively","result","fs","tree","value","caption","component","length","inputRef","React","createRef","json","arr","path","key","push","mountPoint","location","this","Component","App","className","src","logo","alt","href","target","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,8MCOvCC,G,MAAWC,OAAOD,UAEhBE,E,kDAgBJ,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAEDC,MAAQ,CACXC,gBAAiB,GACjBC,aAAc,IAGhB,IAAIC,EAAM,eARO,OASjBP,EAASQ,eAAe,kBAAmB,SAASC,MAAK,WACvD,IAAIC,EAAIV,EAASW,iBAAiB,gCAAiC,mBACnEC,QAAQC,IAAIN,EAAOO,8BAA8BJ,EAAEK,SACnD,IAAIC,EAAKhB,EAASW,iBAAiB,oCACnCC,QAAQC,IAAIG,MAIV,EAAKZ,MAAMa,KAAKC,QAClB,EAAKd,MAAMe,QAAU,EAAKf,MAAMa,KAAKC,OACnC,EAAKd,MAAMa,KAAKG,WAAa,EAAKhB,MAAMa,KAAKG,UAAUC,OAAO,GAAK,EAAKjB,MAAMa,KAAKG,UAAU,GAAGD,UAClG,EAAKf,MAAMe,QAAU,EAAKf,MAAMa,KAAKG,UAAU,GAAGD,SAEpD,EAAKG,SAAWC,IAAMC,YAtBL,E,0EAdWC,EAAMC,EAAKC,GACvC,IAAK,IAAIC,KAAOH,EACW,kBAAdA,EAAKG,GACdF,EAAIG,KAAK,CACPC,WAAYH,EAAK,IAAIC,EACrBG,SAAUN,EAAKG,KAIjBI,KAAKlB,8BAA8BW,EAAKG,GAAMF,EAAKC,EAAK,IAAIC,O,GAX3CL,IAAMU,WAsEhBC,MA5Bf,WAGE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,4BAEA,kBAAC,EAAD,MACA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCpDYC,QACW,cAA7BzC,OAAO8B,SAASY,UAEe,UAA7B1C,OAAO8B,SAASY,UAEhB1C,OAAO8B,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.feb5eaf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Button } from \"@blueprintjs/core\";\nimport { Column, Table } from \"@blueprintjs/table\";\n\nlet webappos = window.webappos;\n\nclass MountTable extends React.Component {\n\n  collectMountPointsRecursively(json, arr, path) {\n    for (let key in json) {\n      if (typeof json[key] === \"string\") {\n        arr.push({\n          mountPoint: path+\"/\"+key,\n          location: json[key]\n        });\n      }\n      else {\n        this.collectMountPointsRecursively(json[key], arr, path+\"/\"+key);\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fs_mount_points: [],\n      supported_fs: []\n    };\n\n    let myThis = this;\n    webappos.request_scopes(\"webappos_scopes\", \"login\").then(()=>{\n      let q = webappos.webcall_and_wait(\"webappos.getUserRegistryValue\", \"fs_mount_points\");\n      console.log(myThis.collectMountPointsRecursively(q.result));\n      let fs = webappos.webcall_and_wait(\"webappos.getSupportedFileSystems\");\n      console.log(fs);\n    });\n  \n    // handling the case when we are inside a VTable cell...\n    if (this.state.tree.value)\n      this.state.caption = this.state.tree.value;\n    if (this.state.tree.component && this.state.tree.component.length>0 && this.state.tree.component[0].caption)\n      this.state.caption = this.state.tree.component[0].caption;\n\n    this.inputRef = React.createRef();\n  }\n}\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.                    \n        </p>\n        <p>\n        </p>\n        <MountTable />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}