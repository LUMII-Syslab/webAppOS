plugins {
    id 'java'
    id 'application'
}

repositories {
    ivy {
      url "https://download.eclipse.org/acceleo/updates/releases/3.7/R201812041426/plugins"
      patternLayout {
            artifact "[artifact]_[revision].[ext]"
      }
    }
    ivy {
      url "https://download.eclipse.org/eclipse/updates/4.11milestones/S-4.11M1-201901091800/plugins"
      patternLayout {
            artifact "[artifact]_[revision].[ext]"
      }
    }
    ivy {
      url "https://download.eclipse.org/modeling/mdt/ocl/updates/releases/6.6.0/plugins"
      patternLayout {
            artifact "[artifact]_[revision].[ext]"
      }
    }
    jcenter()
    mavenCentral()
}

dependencies {
// slf4j used everywhere
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'

// jetty server
    implementation 'org.eclipse.jetty:jetty-server:9.4.14.v20181114'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.14.v20181114'
    implementation 'org.eclipse.jetty:jetty-webapp:9.4.14.v20181114'
    implementation 'org.eclipse.jetty:jetty-proxy:9.4.14.v20181114'
    implementation 'org.eclipse.jetty.websocket:websocket-api:9.4.14.v20181114'
    implementation 'org.eclipse.jetty.websocket:websocket-common:9.4.14.v20181114'
    implementation 'org.eclipse.jetty.websocket:websocket-servlet:9.4.14.v20181114'
    implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.14.v20181114'

// javafx
String osName = System.getProperty("os.name").toLowerCase();
if (osName.contains("windows")) {
    implementation 'org.openjfx:javafx-base:11.0.2:win'
    implementation 'org.openjfx:javafx-controls:11.0.2:win'
    implementation 'org.openjfx:javafx-fxml:11.0.2:win'
    implementation 'org.openjfx:javafx-graphics:11.0.2:win'
    implementation 'org.openjfx:javafx-media:11.0.2:win'
    implementation 'org.openjfx:javafx-swing:11.0.2:win'
    implementation 'org.openjfx:javafx-web:11.0.2:win'
}
else
if (osName.contains("mac os")) {
    implementation 'org.openjfx:javafx-base:11.0.2:mac'
    implementation 'org.openjfx:javafx-controls:11.0.2:mac'
    implementation 'org.openjfx:javafx-fxml:11.0.2:mac'
    implementation 'org.openjfx:javafx-graphics:11.0.2:mac'
    implementation 'org.openjfx:javafx-media:11.0.2:mac'
    implementation 'org.openjfx:javafx-swing:11.0.2:mac'
    implementation 'org.openjfx:javafx-web:11.0.2:mac'
}
else {
    implementation 'org.openjfx:javafx-base:11.0.2:linux'
    implementation 'org.openjfx:javafx-controls:11.0.2:linux'
    implementation 'org.openjfx:javafx-fxml:11.0.2:linux'
    implementation 'org.openjfx:javafx-graphics:11.0.2:linux'
    implementation 'org.openjfx:javafx-media:11.0.2:linux'
    implementation 'org.openjfx:javafx-swing:11.0.2:linux'
    implementation 'org.openjfx:javafx-web:11.0.2:linux'
}

// cloudrail API
    implementation 'com.cloudrail:cloudrail-si-java:2.21.11'

// javamail
    implementation 'com.sun.mail:javax.mail:1.6.2'

// common libraries
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'org.apache.directory.studio:org.apache.commons.codec:1.8'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.codehaus.jettison:jettison:1.4.0'

// lightcouch (for couchdb registry)
    implementation 'org.lightcouch:lightcouch:0.2.0'

// ACME libs and bouncycastle libs (for ACME CertBot)
// TODO: acmev2.6
    implementation 'org.shredzone.acme4j:acme4j-client:1.1'
    implementation 'org.shredzone.acme4j:acme4j-utils:1.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'

// for lua web processor (v3.0.x - for Lua 5.2, we need v2.0.x for Lua 5.1 )
//    implementation 'org.luaj:luaj-jse:2.0.3'
//    implementation 'org.apache.bcel:bcel:5.2'
// currently, we exclude it from packages, since LuaJ 2.0.3 sources are bundled into webAppOS sys

// for ecore repository adapter
    implementation 'org.eclipse.emf:org.eclipse.emf.common:2.15.0.v20181220-0846'
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore:2.17.0.v20181231-1705'
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.15.0.v20180706-1146'

}

sourceSets {
  main.java.srcDirs = ['webappos/sys/src']
  main {
    output.resourcesDir = file('webappos/sys/bin')
    java.outputDir = file('webappos/sys/bin')
  }
}
// Define the main class for the application
mainClassName = 'org.webappos.server.Gate'

distZip.enabled = false
distTar.enabled = false
jar.enabled = false

startScripts {
  classpath += files('BIN_PLACEHOLDER')
  doLast {
    def windowsScriptFile = file getWindowsScript()
    def unixScriptFile    = file getUnixScript()
    windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\BIN_PLACEHOLDER', '%APP_HOME%\\sys\\bin')
    unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/BIN_PLACEHOLDER', '$APP_HOME/sys/bin')
  }
}

installDist {
  doFirst {
        mkdir "webappos/bin"
        mkdir "webappos/lib"
        mkdir "webappos/home"
  }
  into('webappos')
  preserve({
        include 'apps/**'
        include 'boot/**'
        include 'cache/**'
        include 'engines/**'
        include 'etc/**'
        include 'home/**'
        include 'native/**'
        include 'sys/**'
        include 'var/**'
        include 'web-root/**'
  })
}

